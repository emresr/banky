type Query {
   me: User!
   users: [User!]!
   user(id: ID!): User!
   accounts: [Account!]!
   account(id: ID!, dateStart: DateTime, dateEnd: DateTime): Account!
   cards: [Card!]!
   card(id: ID!): Card!
   transactions: [Transaction!]!
   transaction(id: ID!): Transaction!

   ##
   getLast10Transactions(id: ID!): [Transaction!]!
   checkToken(token: String!): User!
}
type Mutation {
   signup(email: String!, password: String!, name: String!): AuthPayload
   login(email: String!, password: String!): AuthPayload
   updateUser(
      id: ID!
      email: String
      name: String
      mainAccountId: Int
      phonenumber: Int
      total: Float
   ): User!
   deleteUser(id: ID!): User!

   #account
   createAccount: Account!
   updateAccount(accountId: ID!, iban: String!, balance: Int): Account!
   #transaction
   createTransaction(
      senderId: ID!
      receiverId: ID!
      amount: Float!
      note: String
   ): Transaction!
   sendToIbanToPhoneNumber(
      senderId: ID!
      amount: Float!
      email: String
      phonenumber: Int
      note: String
   ): Transaction!
   deleteTransaction(id: ID!): Transaction
   #card
   createCard(accountId: ID!): Card!
   updateCardPermissions(
      cardId: ID!
      atmdomestic: Boolean
      atmabroad: Boolean
      shoppingabroad: Boolean
      shoppingdomestic: Boolean
      ecommerceabroad: Boolean
      ecommercedomestic: Boolean
   ): Card!
   deleteCard(cardId: ID!): Boolean
}

scalar DateTime

type User {
   id: ID!
   email: String!
   name: String
   createdAt: DateTime!
   accounts: [Account!]
   total: Float
   phonenumber: Int
}
type AuthPayload {
   token: String
   user: User
}
type Account {
   id: ID!
   name: String!
   iban: String!
   user: User
   userId: Int
   cards: [Card!]
   sended: [Transaction!]
   received: [Transaction!]
   balance: Float
}
type Card {
   id: ID!
   name: String
   account: Account
   accountId: Int
   #permissions
   atmdomestic: Boolean!
   atmabroad: Boolean!
   shoppingdomestic: Boolean!
   shoppingabroad: Boolean!
   ecommercedomestic: Boolean!
   ecommerceabroad: Boolean!
}

type Transaction {
   id: ID!
   sender: Account
   senderId: Int
   newSenderBalance: Int
   receiver: Account
   receiverId: Int
   newReceiverBalance: Int
   key: String
   amount: Float
   note: String
   type: String
   createdAt: DateTime
}
